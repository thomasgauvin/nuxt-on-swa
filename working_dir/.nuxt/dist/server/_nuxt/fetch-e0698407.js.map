{"version":3,"file":"fetch-e0698407.js","sources":["../../../../node_modules/nuxt/dist/app/composables/asyncData.js","../../../../node_modules/nuxt/dist/app/composables/ssr.js","../../../../node_modules/nuxt/dist/app/composables/fetch.js"],"sourcesContent":["import { getCurrentInstance, onBeforeMount, onServerPrefetch, onUnmounted, ref, toRef, unref, watch } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { createError } from \"./error.js\";\nimport { onNuxtReady } from \"./ready.js\";\nconst getDefault = () => null;\nexport function useAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  let [key, handler, options = {}] = args;\n  if (typeof key !== \"string\") {\n    throw new TypeError(\"[nuxt] [asyncData] key must be a string.\");\n  }\n  if (typeof handler !== \"function\") {\n    throw new TypeError(\"[nuxt] [asyncData] handler must be a function.\");\n  }\n  options.server = options.server ?? true;\n  options.default = options.default ?? getDefault;\n  options.lazy = options.lazy ?? false;\n  options.immediate = options.immediate ?? true;\n  const nuxt = useNuxtApp();\n  const getCachedData = () => nuxt.isHydrating ? nuxt.payload.data[key] : nuxt.static.data[key];\n  const hasCachedData = () => getCachedData() !== void 0;\n  if (!nuxt._asyncData[key]) {\n    nuxt._asyncData[key] = {\n      data: ref(getCachedData() ?? options.default()),\n      pending: ref(!hasCachedData()),\n      error: toRef(nuxt.payload._errors, key)\n    };\n  }\n  const asyncData = { ...nuxt._asyncData[key] };\n  asyncData.refresh = asyncData.execute = (opts = {}) => {\n    if (nuxt._asyncDataPromises[key]) {\n      if (opts.dedupe === false) {\n        return nuxt._asyncDataPromises[key];\n      }\n      nuxt._asyncDataPromises[key].cancelled = true;\n    }\n    if ((opts._initial || nuxt.isHydrating && opts._initial !== false) && hasCachedData()) {\n      return getCachedData();\n    }\n    asyncData.pending.value = true;\n    const promise = new Promise(\n      (resolve, reject) => {\n        try {\n          resolve(handler(nuxt));\n        } catch (err) {\n          reject(err);\n        }\n      }\n    ).then((_result) => {\n      if (promise.cancelled) {\n        return nuxt._asyncDataPromises[key];\n      }\n      let result = _result;\n      if (options.transform) {\n        result = options.transform(_result);\n      }\n      if (options.pick) {\n        result = pick(result, options.pick);\n      }\n      asyncData.data.value = result;\n      asyncData.error.value = null;\n    }).catch((error) => {\n      if (promise.cancelled) {\n        return nuxt._asyncDataPromises[key];\n      }\n      asyncData.error.value = error;\n      asyncData.data.value = unref(options.default());\n    }).finally(() => {\n      if (promise.cancelled) {\n        return;\n      }\n      asyncData.pending.value = false;\n      nuxt.payload.data[key] = asyncData.data.value;\n      if (asyncData.error.value) {\n        nuxt.payload._errors[key] = createError(asyncData.error.value);\n      }\n      delete nuxt._asyncDataPromises[key];\n    });\n    nuxt._asyncDataPromises[key] = promise;\n    return nuxt._asyncDataPromises[key];\n  };\n  const initialFetch = () => asyncData.refresh({ _initial: true });\n  const fetchOnServer = options.server !== false && nuxt.payload.serverRendered;\n  if (process.server && fetchOnServer && options.immediate) {\n    const promise = initialFetch();\n    if (getCurrentInstance()) {\n      onServerPrefetch(() => promise);\n    } else {\n      nuxt.hook(\"app:created\", () => promise);\n    }\n  }\n  if (process.client) {\n    const instance = getCurrentInstance();\n    if (instance && !instance._nuxtOnBeforeMountCbs) {\n      instance._nuxtOnBeforeMountCbs = [];\n      const cbs = instance._nuxtOnBeforeMountCbs;\n      if (instance) {\n        onBeforeMount(() => {\n          cbs.forEach((cb) => {\n            cb();\n          });\n          cbs.splice(0, cbs.length);\n        });\n        onUnmounted(() => cbs.splice(0, cbs.length));\n      }\n    }\n    if (fetchOnServer && nuxt.isHydrating && hasCachedData()) {\n      asyncData.pending.value = false;\n    } else if (instance && (nuxt.payload.serverRendered && nuxt.isHydrating || options.lazy) && options.immediate) {\n      instance._nuxtOnBeforeMountCbs.push(initialFetch);\n    } else if (options.immediate) {\n      initialFetch();\n    }\n    if (options.watch) {\n      watch(options.watch, () => asyncData.refresh());\n    }\n    const off = nuxt.hook(\"app:data:refresh\", (keys) => {\n      if (!keys || keys.includes(key)) {\n        return asyncData.refresh();\n      }\n    });\n    if (instance) {\n      onUnmounted(off);\n    }\n  }\n  const asyncDataPromise = Promise.resolve(nuxt._asyncDataPromises[key]).then(() => asyncData);\n  Object.assign(asyncDataPromise, asyncData);\n  return asyncDataPromise;\n}\nexport function useLazyAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [key, handler, options] = args;\n  return useAsyncData(key, handler, { ...options, lazy: true }, null);\n}\nexport function useNuxtData(key) {\n  const nuxt = useNuxtApp();\n  if (!(key in nuxt.payload.data)) {\n    nuxt.payload.data[key] = null;\n  }\n  return {\n    data: toRef(nuxt.payload.data, key)\n  };\n}\nexport async function refreshNuxtData(keys) {\n  if (process.server) {\n    return Promise.resolve();\n  }\n  await new Promise((resolve) => onNuxtReady(resolve));\n  const _keys = keys ? Array.isArray(keys) ? keys : [keys] : void 0;\n  await useNuxtApp().hooks.callHookParallel(\"app:data:refresh\", _keys);\n}\nexport function clearNuxtData(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.data);\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : Array.isArray(keys) ? keys : [keys];\n  for (const key of _keys) {\n    if (key in nuxtApp.payload.data) {\n      nuxtApp.payload.data[key] = void 0;\n    }\n    if (key in nuxtApp.payload._errors) {\n      nuxtApp.payload._errors[key] = void 0;\n    }\n    if (nuxtApp._asyncData[key]) {\n      nuxtApp._asyncData[key].data.value = void 0;\n      nuxtApp._asyncData[key].error.value = void 0;\n      nuxtApp._asyncData[key].pending.value = false;\n    }\n    if (key in nuxtApp._asyncDataPromises) {\n      nuxtApp._asyncDataPromises[key] = void 0;\n    }\n  }\n}\nfunction pick(obj, keys) {\n  const newObj = {};\n  for (const key of keys) {\n    newObj[key] = obj[key];\n  }\n  return newObj;\n}\n","import { setResponseStatus as _setResponseStatus } from \"h3\";\nimport { useNuxtApp } from \"../nuxt.js\";\nexport function useRequestHeaders(include) {\n  if (process.client) {\n    return {};\n  }\n  const headers = useNuxtApp().ssrContext?.event.node.req.headers ?? {};\n  if (!include) {\n    return headers;\n  }\n  return Object.fromEntries(include.map((key) => key.toLowerCase()).filter((key) => headers[key]).map((key) => [key, headers[key]]));\n}\nexport function useRequestEvent(nuxtApp = useNuxtApp()) {\n  return nuxtApp.ssrContext?.event;\n}\nexport function useRequestFetch() {\n  if (process.client) {\n    return globalThis.$fetch;\n  }\n  const event = useNuxtApp().ssrContext?.event;\n  return event?.$fetch || globalThis.$fetch;\n}\nexport function setResponseStatus(arg1, arg2, arg3) {\n  if (process.client) {\n    return;\n  }\n  if (arg1 && typeof arg1 !== \"number\") {\n    return _setResponseStatus(arg1, arg2, arg3);\n  }\n  return _setResponseStatus(useRequestEvent(), arg1, arg2);\n}\n","import { computed, reactive, unref } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useRequestFetch } from \"./ssr.js\";\nimport { useAsyncData } from \"./asyncData.js\";\nexport function useFetch(request, arg1, arg2) {\n  const [opts = {}, autoKey] = typeof arg1 === \"string\" ? [{}, arg1] : [arg1, arg2];\n  const _key = opts.key || hash([autoKey, unref(opts.baseURL), typeof request === \"string\" ? request : \"\", unref(opts.params || opts.query)]);\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useFetch] key must be a string: \" + _key);\n  }\n  if (!request) {\n    throw new Error(\"[nuxt] [useFetch] request is missing.\");\n  }\n  const key = _key === autoKey ? \"$f\" + _key : _key;\n  const _request = computed(() => {\n    let r = request;\n    if (typeof r === \"function\") {\n      r = r();\n    }\n    return unref(r);\n  });\n  if (!opts.baseURL && typeof _request.value === \"string\" && _request.value.startsWith(\"//\")) {\n    throw new Error('[nuxt] [useFetch] the request URL must not start with \"//\".');\n  }\n  const {\n    server,\n    lazy,\n    default: defaultFn,\n    transform,\n    pick,\n    watch,\n    immediate,\n    ...fetchOptions\n  } = opts;\n  const _fetchOptions = reactive({\n    ...fetchOptions,\n    cache: typeof opts.cache === \"boolean\" ? void 0 : opts.cache\n  });\n  const _asyncDataOptions = {\n    server,\n    lazy,\n    default: defaultFn,\n    transform,\n    pick,\n    immediate,\n    watch: watch === false ? [] : [_fetchOptions, _request, ...watch || []]\n  };\n  let controller;\n  const asyncData = useAsyncData(key, () => {\n    controller?.abort?.();\n    controller = typeof AbortController !== \"undefined\" ? new AbortController() : {};\n    const isLocalFetch = typeof _request.value === \"string\" && _request.value.startsWith(\"/\");\n    let _$fetch = opts.$fetch || globalThis.$fetch;\n    if (process.server && !opts.$fetch && isLocalFetch) {\n      _$fetch = useRequestFetch();\n    }\n    return _$fetch(_request.value, { signal: controller.signal, ..._fetchOptions });\n  }, _asyncDataOptions);\n  return asyncData;\n}\nexport function useLazyFetch(request, arg1, arg2) {\n  const [opts, autoKey] = typeof arg1 === \"string\" ? [{}, arg1] : [arg1, arg2];\n  return useFetch(\n    request,\n    {\n      ...opts,\n      lazy: true\n    },\n    // @ts-expect-error we pass an extra argument with the resolved auto-key to prevent another from being injected\n    autoKey\n  );\n}\n"],"names":["pick"],"mappings":"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","x_google_ignoreList":[0,1,2]}